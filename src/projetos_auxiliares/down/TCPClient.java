/** @TCPClient: Cliente para conexao TCP com Threads *               Envia uma informacao ao servidor e recebe informacoes sobre a mensagens processadas * * Universidade Tecnológica Federal do Paraná - UTFPR-CM * @Autor: Gabriel Negrão Silva * @Data: 29/09/2017 */package Parte4;import java.net.*;import java.io.*;import java.util.logging.Level;import java.util.logging.Logger;import java.io.DataInputStream;public class TCPClient {    private static ChatMulticastGUI chatGUI;    private static DataOutputStream out;    private static DataInputStream in;    private static Thread clienteEnvia;    private static Thread clienteRecebe;    private static Socket s;    private static File f;    private static FileOutputStream fos = null;           public TCPClient(ChatMulticastGUI chatGUI, String ipServidor, int serverPort){        this.chatGUI = chatGUI;        try {            s = new Socket(ipServidor, serverPort);  /* conecta com o servidor */            TCPClientEnvia();            TCPClientRecebe();        } catch (IOException ex) {            Logger.getLogger(TCPClient.class.getName()).log(Level.SEVERE, null, ex);        }    }        void EnviaMsg(String msg){                       try {             out.writeUTF(msg);            System.out.println ("Informacao enviada.");                    } catch (IOException ex) {            Logger.getLogger(TCPClient.class.getName()).log(Level.SEVERE, null, ex);        }    }        public static void TCPClientEnvia(){        clienteEnvia = (new Thread() {            @Override            public void run() {                    try{                    /* cria objetos de leitura e escrita */                    out = new DataOutputStream( s.getOutputStream());	                } catch (UnknownHostException e){                    System.out.println("Socket: -TCPClientEnvia-"+e.getMessage());                } catch (EOFException e){                    System.out.println("EOF: -TCPClientEnvia-"+e.getMessage());                } catch (IOException e){                    System.out.println("leitura: -TCPClientEnvia-"+e.getMessage());                } //catch            }        });//Thread        clienteEnvia.start();   }//metodo        public static void TCPClientRecebe(){        clienteRecebe = (new Thread() {            @Override            public void run() {                try{                                        /* cria objetos de leitura e escrita */                    in = new DataInputStream( s.getInputStream());                    String data = null;                    while(true){                                               data = new String (in.readUTF());                                                if(data.equals("QTD-PATH")){                            int qtd_path = in.readInt();                            chatGUI.exibeMsg(""+Integer.toString(qtd_path)+" Arquivos contidos no diretório padrão do servidor:\n");                            System.out.println(""+Integer.toString(qtd_path)+" Arquivos contidos no diretório padrão do servidor:");                        }                        else if(data.equals("FILES")){                            String nomeArq = in.readUTF();                            long tamanhoTot = in.readLong();                            System.out.print("Size: "+String.valueOf(tamanhoTot)+"_________"+nomeArq+"\n");                            //chatGUI.exibeMsg("Size: "+String.valueOf(tamanhoTot)+"_________"+nomeArq+"\n");                                                     }                                                  else if(data.equals("EXIT")){                            in.close();                            s.close();                            clienteRecebe.interrupt();                            this.interrupt();                            break;			}                                                 else if(data.equals("DOWN")){                            int filesize;                            filesize = new Integer(in.readUTF());                                                        if(filesize != 0){                                System.out.println(filesize);                                File file = new File(in.readUTF());                                fos = new FileOutputStream(file);                                                                byte[] buffer = new byte[128];                                int read = 0;                                int totalRead = 0;                                int remaining = filesize;                                while((read = in.read(buffer, 0, Math.min(buffer.length, remaining))) > 0) {                                        totalRead += read;                                        remaining -= read;                                        System.out.println("read " + totalRead + " bytes.");                                        System.out.println("restante "+remaining);                                        fos.write(buffer, 0, read);                                }                                fos.close();                            }                            else{                                System.out.println("O Arquivo não existe");                            }                        }                                                else{                            System.out.println("informação recebida");                            chatGUI.exibeMsg(data);                            System.out.println(data);                        }                    }                } catch (UnknownHostException e){                    System.out.println("Socket: -TCPClientRecebe-"+e.getMessage());                } catch (EOFException e){                    System.out.println("EOF:-TCPClientRecebe-"+e.getMessage());                } catch (IOException e){                    System.out.println("leitura:-TCPClientRecebe-"+e.getMessage());                } //catch            }        });//Thread        clienteRecebe.start();   }//metodo    } //class